# azure-pipelines.yml

# Python to Linux Web App on Azure
# Builds your Python project and deploys it to Azure as a Linux Web App.
# Adjust the Python version as appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
      - main

variables:
  # Azure Resource Manager service connection ID
  azureServiceConnectionId: '145b29a3-be32-4c17-ad9c-8f8fb02b04a3'  # Ensure this matches your service connection ID

  # Web app name
  webAppName: 'Inventorydbu'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name (for Azure DevOps Environments)
  environmentName: 'Inventorydbu'

  # Project root folder - adjust if your project root differs
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version
  pythonVersion: '3.11'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Set up Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: 'Install Dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive Files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Publish Artifact'
      artifact: 'drop'

- stage: Deploy
  displayName: 'Deploy to Azure Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    displayName: 'Azure Web App Deployment'
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Set up Python Version for Deployment'

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App: $(webAppName)'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appType: 'webAppLinux'
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
